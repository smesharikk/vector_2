import math


class CyberdyanskBank:

    def __init__(self, initial_balance=10000):
        Const_default = 1
        self.initial_balance = initial_balance
        self.balance = initial_balance
        self.buy_dates = []
        self.shop_names = []
        self.money_sum = []
        self.cashback_rules = {
            'default': Const_default,
            'Пятёрочка': 5 + Const_default,
            'Лента': 5 + Const_default,
            'ДНС': 3 + Const_default,
            'Лэтуаль': 10 + Const_default,
        }
        self.total_cashback = 0

    def add_purchase(self, date, shop, amount):
        if not self.validate_purchase(amount):
            return

        self.buy_dates.append(date)
        self.shop_names.append(shop)
        self.money_sum.append(amount)

        cashback = self.calculate_cashback(shop, amount)
        self.total_cashback += cashback
        self.balance += amount + cashback

    def add_purchases(self, purchases):
        sorted_purchases = sorted(purchases, key=lambda x: x[0])
        for purchase in sorted_purchases:
            self.add_purchase(*purchase)

    def calculate_cashback(self, shop, amount):
        if shop == SBP_SHOP or amount > 0:
            return 0
        percentage = self.cashback_rules.get(
            shop, self.cashback_rules['default'])
        cashback = math.ceil(abs(amount) * (percentage / 100))
        return cashback

    def calc_cashback(self):
        return self.total_cashback

    def get_balance(self):
        return self.balance

    def set_cashback_rule(self, shop, percentage):
        self.cashback_rules[shop] = percentage

    def get_history(self):
        return list(zip(self.buy_dates, self.shop_names, self.money_sum))

    def validate_purchase(self, amount):
        if self.balance + amount < 0:
            print(
                f"Transaction declined: insufficient funds for amount {amount}")
            return False
        return True


SBP_SHOP = 'СБП'

# Пример использования:
bank = CyberdyanskBank()

# Добавление покупок
purchases = [
    ('2023.10.10', 'Пятёрочка', -189),
    ('2023.10.12', SBP_SHOP, 1000),
    ('2023.10.13', 'Лента', -1301),
    ('2023.10.13', 'ДНС', -4999),
    ('2023.10.14', 'Лэтуаль', -1999),
    ('2023.10.15', 'Пятёрочка', -396),

]

# Добавляем все покупки из списка в банк
bank.add_purchases(purchases)

# Вычисление общего кэшбэка
total_cashback = bank.calc_cashback()
print(f"Total cashback: {total_cashback}")

# Получение текущего баланса
current_balance = bank.get_balance()
print(f"Current balance: {current_balance}")

# Получение истории покупок и вывод каждой покупки на отдельной строке
history = bank.get_history()
print("Purchase history:")
for record in history:
    print(record)

# Проверка начисления кэшбэка для перевода через СБП
test_purchase = (SBP_SHOP, -1000)
cashback = bank.calculate_cashback(test_purchase[0], test_purchase[1])
print(
    f"Cashback for {test_purchase[0]} with amount {test_purchase[1]}: {cashback}")
