import math

class CyberdyanskBank:

    def __init__(self, initial_balance=10000):
        # Инициализация начального баланса и текущего баланса
        self.initial_balance = initial_balance
        self.balance = initial_balance
        # Инициализация списков для хранения дат покупок, названий магазинов и сумм операций
        self.buy_dates = []
        self.shop_names = []
        self.money_sum = []
        # Инициализация правил кэшбэка для различных магазинов
        self.cashback_rules = {
            'default': 1,  # По умолчанию 1% кэшбэк на все покупки
            'Пятёрочка': 5,  # 5% кэшбэк на покупки в супермаркетах
            'Лента': 5,  # 5% кэшбэк на покупки в супермаркетах
            'ДНС': 3,  # 3% кэшбэк на покупки в магазинах электроники
            'Лэтуаль': 10,  # 10% кэшбэк на покупки в магазинах косметики
        }
        self.total_cashback = 0  # Инициализация общей суммы начисленного кэшбэка

    def add_purchases(self, purchases):
        # Распаковка списка покупок в отдельные списки дат, названий магазинов и сумм операций
        self.buy_dates, self.shop_names, self.money_sum = zip(*purchases)
        # Вычисление кэшбэка для каждой покупки, исключая переводы через СБП
        cashbacks = list(map(self.calculate_cashback, self.shop_names, self.money_sum))
        # Суммирование всех начисленных кэшбэков
        self.total_cashback = sum(cashbacks)
        # Обновление текущего баланса с учетом всех операций и начисленного кэшбэка
        self.balance += sum(self.money_sum) + self.total_cashback

    def calculate_cashback(self, shop, amount):
        # Исключение перевода через СБП из начисления кэшбэка
        if shop == SBP_SHOP or amount > 0:
            return 0
        # Получение процента кэшбэка для магазина, либо использование значения по умолчанию
        percentage = self.cashback_rules.get(shop, self.cashback_rules['default'])
        # Вычисление кэшбэка для расходной операции и округление вверх до ближайшего целого числа
        cashback = math.ceil(abs(amount) * (percentage / 100))
        return cashback

    def calc_cashback(self):
        # Возвращение общей суммы начисленного кэшбэка
        return self.total_cashback

    def get_balance(self):
        # Возвращение текущего баланса
        return self.balance

    def set_cashback_rule(self, shop, percentage):
        # Установка или обновление правила кэшбэка для указанного магазина
        self.cashback_rules[shop] = percentage

    def get_history(self):
        # Возвращение истории покупок в виде списка кортежей (дата, магазин, сумма операции)
        return list(zip(self.buy_dates, self.shop_names, self.money_sum))

    def validate_purchase(self, amount):
        # Проверка, что сумма операции не превышает текущий баланс и баланс не станет отрицательным
        if self.balance + amount < 0:
            print(f"Transaction declined: insufficient funds for amount {amount}")
            return False
        return True

# Константа для обозначения перевода через СБП
SBP_SHOP = 'СБП'

# Пример использования:
bank = CyberdyanskBank()

# Добавление покупок
purchases = [
    ('2023.10.10', 'Пятёрочка', -189),  # Покупка в супермаркете Пятёрочка
    ('2023.10.12', SBP_SHOP, 1000),  # Положительная операция через СБП
    ('2023.10.13', 'Лента', -1301),  # Покупка в супермаркете Лента
    ('2023.10.13', 'ДНС', -4999),  # Покупка в магазине электроники ДНС
    ('2023.10.14', 'Лэтуаль', -1999),  # Покупка в магазине косметики Лэтуаль
    # Еще одна покупка в супермаркете Пятёрочка
    ('2023.10.15', 'Пятёрочка', -396),
    ('2023.10.15', SBP_SHOP, -500),  # Отрицательная операция через СБП
]

# Проверка и добавление всех покупок из списка в банк
valid_purchases = [purchase for purchase in purchases if bank.validate_purchase(purchase[2])]
if valid_purchases:
    bank.add_purchases(valid_purchases)

# Вычисление общего кэшбэка
total_cashback = bank.calc_cashback()
print(f"Total cashback: {total_cashback}")

# Получение текущего баланса
current_balance = bank.get_balance()
print(f"Current balance: {current_balance}")

# Получение истории покупок и вывод каждой покупки на отдельной строке
history = bank.get_history()
print("Purchase history:")
for record in history:
    print(record)

# Проверка начисления кэшбэка для перевода через СБП
test_purchase = (SBP_SHOP, -1000)
cashback = bank.calculate_cashback(test_purchase[0], test_purchase[1])
print(f"Cashback for {test_purchase[0]} with amount {test_purchase[1]}: {cashback}")
